/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include "helper/keymap_french.h"
#include "helper/keypos.h"

#define BASE       0
#define NAV        1
#define MOUSE      2
#define MEDIA      3
#define NUM        4
#define SYM        5
#define FUN        6
#define SFT_SYM    7
#define LYR_LCK    8

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumb keys

&mt {
    tapping-term-ms = <175>;
    flavor = "tap-preferred";
};

&sk {
     release-after-ms = <2000>;
     quick-release;
};

&mmv {
    time-to-max-speed-ms = <100>;
};

&mwh {
    acceleration-exponent=<1>;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

/ { 
	macros {
		parentheses: parentheses_macro {
			compatible = "zmk,behavior-macro";
			label = "PARENTHESES";
			#binding-cells = <0>;
			bindings = <&kp FR_LPRN>, <&kp FR_RPRN>, <&kp LEFT_ARROW>;
		};
		squarebrackets: squarebrackets_macro {
			compatible = "zmk,behavior-macro";
			label = "SQUAREBRACKETS";
			#binding-cells = <0>;
			bindings = <&kp FR_LBRC>, <&kp FR_RBRC>, <&kp LEFT_ARROW>;
		};
		curlybrackets: curlybrackets_macro {
			compatible = "zmk,behavior-macro";
			label = "CURLYBRACKETS";
			#binding-cells = <0>;
			bindings = <&kp FR_LCBR>, <&kp FR_RCBR>, <&kp LEFT_ARROW>;
		};
		ctrl_c_t_v: ctrl_c_t_v_macro {
			compatible = "zmk,behavior-macro";
			label = "CTRL_C_T_V";
			#binding-cells = <0>;
			bindings = <&kp LC(INS)>, <&kp LC(FR_T)>, <&kp LS(INS)>, <&kp ENTER>;
		};
	};

	combos {

	};

	behaviors {
		td_quote: tap_dance_mod_tap {
			compatible = "zmk,behavior-tap-dance";
			label = "TAP_DANCE_MOD_TAP";
			#binding-cells = <0>;
			tapping-term-ms = <175>;
			bindings = <&mt FR_EXLM FR_QUOT>, <&kp FR_DQUO>;
		};
		ctrl_ctv_td: ctrl_ctv_td {
			compatible = "zmk,behavior-tap-dance";
			label = "CTRL_CTV_TD";
			#binding-cells = <0>;
			tapping-term-ms = <175>;
			bindings = <&kp LC(INS)>, <&kp LC(FR_F)>, <&ctrl_c_t_v>;
		};
		lh_pht: left_hand_positional_hold_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "LEFT_POSITIONAL_HOLD_TAP";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <280>;                         // <---[[produces tap if held longer than tapping-term-ms]]
			quick-tap-ms = <0>;
			bindings = <&kp>, <&kp>;
			hold-trigger-on-release;
			hold-trigger-key-positions = <KEYS_R THUMBS>;    // <---[[right-hand keys]]
		};
		rh_pht: right_hand_positional_hold_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "RIGHT_POSITIONAL_HOLD_TAP";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <280>;                         // <---[[produces tap if held longer than tapping-term-ms]]
			quick-tap-ms = <0>;
			bindings = <&kp>, <&kp>;
			hold-trigger-on-release;
			hold-trigger-key-positions = <KEYS_L THUMBS>;    // <---[[left-hand keys]]
		};
	};

	keymap {
		compatible = "zmk,keymap";

		base_layer {
			bindings = <
				&kp FR_Q				&lh_pht FR_CIRC FR_W		&lh_pht RA(FR_ASTR) FR_F		&lh_pht RA(FR_COMM) FR_P		&lh_pht FR_DIAE FR_G			&rh_pht FR_DIAE FR_J	&rh_pht RA(FR_COMM) FR_L		&rh_pht RA(FR_ASTR) FR_O		&rh_pht FR_CIRC FR_Y		&td_quote
				&lh_pht LMETA FR_A		&lh_pht LALT FR_R			&lh_pht LCTRL FR_S				&lh_pht LSHFT FR_T				&kp FR_D 						&kp FR_H				&rh_pht RSHFT FR_N				&rh_pht RCTRL FR_E				&rh_pht RALT FR_I			&rh_pht RMETA FR_U
				&lt LYR_LCK FR_Z		&kp FR_X					&mt FR_CCED FR_C				&kp FR_V						&kp FR_B 						&kp FR_K				&kp FR_M 						&kp FR_COMM						&kp FR_SCLN					&kp FR_COLN
														&lt MEDIA ESC 			&lt NAV SPACE			&lt MOUSE TAB				&lt NUM ENTER		&lt SYM BSPC			&lt FUN DEL
			>;
		};

		nav_layer {
			bindings = <
				&kp LC(FR_Z)	&kp LS(DEL)		&ctrl_ctv_td	&kp LS(INS)		&mt FR_G LC(LS(FR_Z))			&none				&kp HOME			&kp UP_ARROW		&kp END				&none
				&kp LMETA 		&kp LALT		&kp LCTRL 		&kp LSHFT 		&kp LC(FR_D) 					&kp CAPSLOCK		&kp LEFT_ARROW		&kp DOWN_ARROW		&kp RIGHT_ARROW		&kp PG_UP
				&to BASE		&kp RALT		&none			&none			&none	 						&none				&none	 			&none				&none				&kp PG_DN
												&none 			&none			&none							&kp ENTER			&kp BSPC			&kp DEL
			>;
		};

		mouse_layer {
			bindings = <
				&kp LC(FR_Z)	&kp LS(DEL)		&kp LC(INS)		&kp LS(INS)		&mt FR_G LC(LS(FR_Z))			&none			&mwh SCROLL_LEFT	&mmv MOVE_UP		&mwh SCROLL_RIGHT		&none
				&kp LMETA 		&kp LALT		&kp LCTRL 		&kp LSHFT 		&kp LC(FR_D) 					&caps_word		&mmv MOVE_LEFT 		&mmv MOVE_DOWN		&mmv MOVE_RIGHT			&mwh SCROLL_UP
				&to BASE		&kp RALT		&none			&none			&none	 						&none			&none	 			&none				&none					&mwh SCROLL_DOWN
												&none 			&none			&none							&mkp RCLK		&mkp LCLK			&mkp MCLK
			>;
		};

		media_layer {
			bindings = <
				&bootloader		&bt BT_CLR		&none			&none			&none					&none			&none			&none				&none				&bootloader
				&kp LMETA 		&kp LALT		&kp LCTRL 		&kp LSHFT 		&kp LC(FR_D) 			&none			&kp C_PREV		&kp C_VOL_DN		&kp C_VOL_UP		&kp C_NEXT
				&to BASE		&kp RALT		&none			&none			&none	 				&none			&none			&kp C_BRI_DN		&kp C_BRI_UP		&none
												&none 			&none			&none					&kp C_STOP		&kp C_PP		&kp C_MUTE
			>;
		};

		num_layer {
			bindings = <
				&kp RA(N7)		&kp FR_7		&kp FR_8		&kp FR_9		&kp FR_BSLS				&kp LC(LS(FR_Z))	&kp LS(INS)			&kp LC(INS)			&kp LS(DEL)		&kp LC(FR_Z)
				&kp FR_PLUS		&kp FR_4		&kp FR_5 		&kp FR_6 		&kp FR_ASTR 			&none				&kp RSHFT			&kp RCTRL			&kp RALT		&kp RMETA
				&kp FR_MINS		&kp FR_1		&kp FR_2		&kp FR_3		&kp FR_SLSH				&none				&kp C_BRI_DN		&kp C_BRI_UP		&kp LALT		&to BASE
												&kp FR_DOT		&kp FR_0		&kp FR_EQL				&none				&none				&none
			>;
		};

		sym_layer {
			bindings = <
				&kp FR_TILD				&kp FR_PERC		&kp FR_CIRC		&kp FR_UNDS		&squarebrackets				&kp LC(LS(FR_Z))	&kp LS(INS)			&kp LC(INS)			&kp LS(DEL)		&kp LC(FR_Z)
				&mt FR_PIPE FR_BSLS		&kp FR_AT		&kp FR_DLR 		&kp FR_MINS		&parentheses				&none				&mo SFT_SYM			&kp RCTRL			&kp RALT		&kp RMETA
				&kp FR_HASH				&kp FR_AMPR		&kp FR_EURO		&kp FR_EQL		&curlybrackets				&none				&kp C_BRI_DN		&kp C_BRI_UP		&kp LALT		&to BASE
														&kp FR_LABK		&kp FR_RABK		&none						&none				&none				&none
			>;
		};

		fun_layer {
			bindings = <
				&kp F12		&kp F7		&kp F8		&kp F9		&none				&kp LC(LS(C_AC_PRINT))	&none			&none			&none		&none
				&kp F11		&kp F4		&kp F5		&kp F6		&none				&none					&kp RSHFT		&kp RCTRL		&kp RALT	&kp RMETA
				&kp F10		&kp F1		&kp F2		&kp F3		&none				&none					&kp C_BRI_DN	&kp C_BRI_UP	&kp LALT	&to BASE
										&none		&none		&none				&none					&none			&none
			>;
		};

		sft_sym_layer {
			bindings = <
				&none		&none		&none		&kp FR_LBRC		&kp FR_RBRC				&none		&none		&none		&none		&none
				&none		&none		&none		&kp FR_LPRN		&kp FR_RPRN				&none		&none		&none		&none		&none
				&none		&none		&none		&kp FR_LCBR		&kp FR_RCBR				&none		&none		&none		&none		&none
										&none		&none			&none					&none		&none		&none
			>;
		};

		lyr_lck_layer {
			bindings = <
				&trans		&trans		&trans			&trans		&trans					&trans		&trans		&trans		&trans		&trans
				&trans		&trans		&trans			&trans		&trans					&trans		&trans		&trans		&trans		&trans
				&trans		&trans		&trans			&trans		&trans					&trans		&trans		&trans		&trans		&trans
										&to MEDIA 		&to NAV		&to MOUSE 				&to NUM		&to SYM		&to FUN
			>;
		};

	};
};
