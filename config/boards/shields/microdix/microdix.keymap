/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include "helper/keymap_french.h"
#include "helper/mouse.dtsi"
#include "../../../../zmk-nodefree-config/helper.h"
#include "../../../../zmk-nodefree-config/keypos_def/keypos_36keys.h"

#define BASE       0
#define NAV        1
#define MOUSE      2
#define MEDIA      3
#define NUM        4
#define SYM        5
#define FUN        6
#define SFT_SYM    7
#define LYR_LCK    8

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumb keys

#define ______ &trans
#define xxxxxx &none

#undef COMBO_TERM
#define COMBO_TERM 50

#define QUICK_TAP_MS 175

&mt {
    tapping-term-ms = <175>;
    flavor = "tap-preferred";
};

&sk {
     release-after-ms = <2000>;
     quick-release;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

// open / close brackets
ZMK_BEHAVIOR(parentheses, macro,
	bindings = <&kp FR_LPRN>, <&kp FR_RPRN>, <&kp LEFT_ARROW>;
)
ZMK_BEHAVIOR(squarebrackets, macro,
	bindings = <&kp FR_LBRC>, <&kp FR_RBRC>, <&kp LEFT_ARROW>;
)
ZMK_BEHAVIOR(curlybrackets, macro,
	bindings = <&kp FR_LCBR>, <&kp FR_RCBR>, <&kp LEFT_ARROW>;
)
ZMK_BEHAVIOR(ctrl_c_t_v, macro,
	bindings = <&kp LC(INS)>, <&kp LC(FR_T)>, <&kp LS(INS)>, <&kp ENTER>;
)

// tap -> c | hold -> รง | hold + shift -> ร
ZMK_BEHAVIOR(c_cedille_macro, macro,
	wait-ms	= <1>;
	tap-ms = <1>;
	bindings = <&kp CAPSLOCK>, <&kp FR_CCED>, <&kp CAPSLOCK>;
)
ZMK_BEHAVIOR(c_cedille_ht, hold_tap,
	flavor = "tap-preferred";
	tapping-term-ms = <175>;
	global-quick-tap;
	bindings = <&c_cedille_morph>, <&kp>;
)
ZMK_BEHAVIOR(c_cedille_morph, mod_morph,
	bindings = <&kp FR_CCED>, <&c_cedille_macro>;
	mods = <(MOD_LSFT|MOD_RSFT)>;
)

// y + ' -> !
ZMK_COMBO(combo_exlm,  &kp FR_EXLM, RT3 RT4, BASE)

// tap -> ', double-tap -> "
ZMK_BEHAVIOR(td_quote, tap_dance,
	tapping-term-ms = <175>;
	bindings = <&kp FR_QUOT>, <&kp FR_DQUO>, <&kp FR_EXLM>;
)

// tap -> copy | double-tap -> copy + ctrl+f | triple-tap -> copy + ctrl+t, ctrl+v, enter
ZMK_BEHAVIOR(ctrl_ctv_td, tap_dance,
	tapping-term-ms = <175>;
	bindings = <&kp LC(INS)>, <&kp LC(FR_F)>, <&ctrl_c_t_v>;
)

// tap -> space | space + shift -> dot, space, sticky shift | hold -> activate layer
ZMK_BEHAVIOR(dot_spc, macro,
	wait-ms = <0>;
	tap-ms = <5>;
	bindings = <&kp FR_DOT &kp SPACE &sk LSHFT>;
)
ZMK_BEHAVIOR(spc_morph, mod_morph,
	bindings = <&kp SPACE>, <&dot_spc>;
	mods = <(MOD_LSFT)>;
)
ZMK_BEHAVIOR(lt_spc, hold_tap,
	flavor = "balanced";
	tapping-term-ms = <200>;
	quick-tap-ms = <QUICK_TAP_MS>;
	bindings = <&mo>, <&spc_morph>;
)

// tap -> backspace | rshft + tap: delete | hold: sym layer
ZMK_BEHAVIOR(bs_del_sym, mod_morph,
    bindings = <&lt SYM BSPC>, <&kp DEL>;
    mods = <(MOD_RSFT)>;
)

// tap -> sticky-shift | rshft + tap: caps-word | hold: shift
ZMK_BEHAVIOR(ss_cw, mod_morph,
    bindings = <&sk RSHFT>, <&caps_word>;
    mods = <(MOD_RSFT)>;
)

// home-row mods
ZMK_BEHAVIOR(lh_pht, hold_tap,  // left-hand HRMs
	flavor = "balanced";
	tapping-term-ms = <280>;
	quick-tap-ms = <QUICK_TAP_MS>;
	global-quick-tap-ms = <150>;        // requires PR #1387
	bindings = <&kp>, <&kp>;
	hold-trigger-key-positions = <KEYS_R THUMBS>;
	hold-trigger-on-release;            // requires PR #1423
)
ZMK_BEHAVIOR(rh_pht, hold_tap,  // right-hand HRMs
	flavor = "balanced";
	tapping-term-ms = <280>;
	quick-tap-ms = <QUICK_TAP_MS>;
	global-quick-tap-ms = <150>;        // requires PR #1387
	bindings = <&kp>, <&kp>;
	hold-trigger-key-positions = <KEYS_L THUMBS>;
	hold-trigger-on-release;            // requires PR #1423
)

/* keymap */

ZMK_LAYER(base_layer,
	&kp FR_Q				&lh_pht FR_CIRC FR_W		&lh_pht RA(FR_ASTR) FR_F		&lh_pht RA(FR_COMM) FR_P		&lh_pht FR_DIAE FR_G			&rh_pht FR_DIAE FR_J	&rh_pht RA(FR_COMM) FR_L		&rh_pht RA(FR_ASTR) FR_O		&rh_pht FR_CIRC FR_Y		&td_quote
	&lh_pht LMETA FR_A		&lh_pht LALT FR_R			&lh_pht LCTRL FR_S				&lh_pht LSHFT FR_T				&kp FR_D 						&kp FR_H				&rh_pht RSHFT FR_N				&rh_pht RCTRL FR_E				&rh_pht RALT FR_I			&rh_pht RMETA FR_U
	&lt LYR_LCK FR_Z		&kp FR_X					&c_cedille_ht FR_C FR_C			&kp FR_V						&kp FR_B 						&kp FR_K				&kp FR_M 						&kp FR_COMM						&kp FR_SCLN					&kp FR_COLN
														&lt MEDIA ESC 					&lt_spc NAV 0					&lt FUN TAB						&lt NUM ENTER			&bs_del_sym						&ss_cw
)
ZMK_LAYER(nav_layer,
	&kp LC(FR_Z)	&kp LS(DEL)		&ctrl_ctv_td	&kp LS(INS)		&mt FR_G LC(LS(FR_Z))			xxxxxx				&kp HOME			&kp UP_ARROW		&kp END				xxxxxx
	&kp LMETA 		&kp LALT		&kp LCTRL 		&kp LSHFT 		&kp LC(FR_D) 					&kp CAPSLOCK		&kp LEFT_ARROW		&kp DOWN_ARROW		&kp RIGHT_ARROW		&kp PG_UP
	&to BASE		&kp RALT		xxxxxx			xxxxxx			xxxxxx	 						xxxxxx				xxxxxx	 			xxxxxx				xxxxxx				&kp PG_DN
									xxxxxx 			xxxxxx			xxxxxx							______				______				______
)
ZMK_LAYER(mouse_layer,
	&kp LC(FR_Z)	&kp LS(DEL)		&kp LC(INS)		&kp LS(INS)		&mt FR_G LC(LS(FR_Z))			xxxxxx			&mwh SCROLL_LEFT	&mmv MOVE_UP		&mwh SCROLL_RIGHT		xxxxxx
	&kp LMETA 		&kp LALT		&kp LCTRL 		&kp LSHFT 		&kp LC(FR_D) 					&caps_word		&mmv MOVE_LEFT	 	&mmv MOVE_DOWN		&mmv MOVE_RIGHT			&mwh SCROLL_UP
	&to BASE		&kp RALT		xxxxxx			xxxxxx			xxxxxx	 						xxxxxx			xxxxxx	 			xxxxxx				xxxxxx					&mwh SCROLL_DOWN
									xxxxxx 			xxxxxx			xxxxxx							&mkp RCLK		&mkp LCLK			&mkp MCLK
)
ZMK_LAYER(media_layer,
	&bootloader		&bt BT_CLR		xxxxxx			xxxxxx			xxxxxx					xxxxxx			xxxxxx			xxxxxx				xxxxxx				&bootloader
	&kp LMETA 		&kp LALT		&kp LCTRL 		&kp LSHFT 		&kp LC(FR_D) 			xxxxxx			&kp C_PREV		&kp C_VOL_DN		&kp C_VOL_UP		&kp C_NEXT
	&to BASE		&kp RALT		xxxxxx			xxxxxx			xxxxxx	 				xxxxxx			xxxxxx			&kp C_BRI_DN		&kp C_BRI_UP		xxxxxx
									xxxxxx 			xxxxxx			xxxxxx					&kp C_STOP		&kp C_PP		&kp C_MUTE
)
ZMK_LAYER(num_layer,
	&kp RA(N7)		&kp FR_7		&kp FR_8		&kp FR_9		&kp FR_BSLS				&kp LC(LS(FR_Z))	&kp LS(INS)		&kp LC(INS)		&kp LS(DEL)		&kp LC(FR_Z)
	&kp FR_PLUS		&kp FR_4		&kp FR_5 		&kp FR_6 		&kp FR_ASTR 			xxxxxx				&kp RSHFT		&kp RCTRL		&kp RALT		&kp RMETA
	&kp FR_MINS		&kp FR_1		&kp FR_2		&kp FR_3		&kp FR_SLSH				xxxxxx				xxxxxx			xxxxxx			&kp LALT		&to BASE
									&kp FR_DOT		&kp FR_0		&kp FR_EQL				xxxxxx				xxxxxx			xxxxxx
)
ZMK_LAYER(sym_layer,
	&kp FR_TILD				&kp FR_PERC		&kp FR_CIRC		&kp FR_UNDS		&squarebrackets				&kp LC(LS(FR_Z))	&kp LS(INS)		&kp LC(INS)		&kp LS(DEL)		&kp LC(FR_Z)
	&mt FR_PIPE FR_BSLS		&kp FR_AT		&kp FR_DLR 		&kp FR_MINS		&parentheses				xxxxxx				&mo SFT_SYM		&kp RCTRL		&kp RALT		&kp RMETA
	&kp FR_HASH				&kp FR_AMPR		&kp FR_EURO		&kp FR_EQL		&curlybrackets				xxxxxx				xxxxxx			xxxxxx			&kp LALT		&to BASE
											&kp FR_LABK		&kp FR_RABK		xxxxxx						xxxxxx				xxxxxx				xxxxxx
)
ZMK_LAYER(fun_layer,
	&kp F12		&kp F7		&kp F8		&kp F9		xxxxxx				&kp PRINTSCREEN			xxxxxx			xxxxxx			xxxxxx		xxxxxx
	&kp F11		&kp F4		&kp F5		&kp F6		xxxxxx				xxxxxx					&kp RSHFT		&kp RCTRL		&kp RALT	&kp RMETA
	&kp F10		&kp F1		&kp F2		&kp F3		xxxxxx				xxxxxx					xxxxxx			xxxxxx			&kp LALT	&to BASE
							xxxxxx		xxxxxx		xxxxxx				xxxxxx					xxxxxx			xxxxxx
)
ZMK_LAYER(sft_sym_layer,
	xxxxxx		xxxxxx		xxxxxx		&kp FR_LBRC		&kp FR_RBRC				xxxxxx		xxxxxx		xxxxxx		xxxxxx		xxxxxx
	xxxxxx		xxxxxx		xxxxxx		&kp FR_LPRN		&kp FR_RPRN				xxxxxx		xxxxxx		xxxxxx		xxxxxx		xxxxxx
	xxxxxx		xxxxxx		xxxxxx		&kp FR_LCBR		&kp FR_RCBR				xxxxxx		xxxxxx		xxxxxx		xxxxxx		xxxxxx
							xxxxxx		xxxxxx			xxxxxx					xxxxxx		xxxxxx		xxxxxx
)
ZMK_LAYER(lyr_lck_layer,
	______		______		______			______		______					______		______		______		______		______
	______		______		______			______		______					______		______		______		______		______
	______		______		______			______		______					______		______		______		______		______
							&to MEDIA 		&to NAV		&to FUN 				&to NUM		&to SYM		______
)
